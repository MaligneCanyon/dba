#! /usr/bin/env ruby
require 'pg'
require 'io/console'

# puts "Hello World"

# Move the add_expense and list_expenses methods into a new class, ExpenseData
# Change the CONNECTION constant (DB) to an instance variable
class ExpenseData
  def initialize
    # Create a connection to the database
    # DB = PG.connect(dbname: "expense_db") # use PG::Connection.new instead
    # DB = PG::Connection.new(dbname: "expense_db")
    @db = PG::Connection.new(dbname: "expense_db")

    # Call the setup_schema method
    setup_schema
  end

  # list expenses in a tbl-like format
  def list_expenses
    # Execute a query to retrieve all rows from the expenses table, ordered
    # from oldest to newest
    result = @db.exec "SELECT * FROM expenses ORDER BY created_on, id;"

    # # Iterate through each result row and print it to the screen
    # result.each do |row|
    #   puts "#{row["id"].rjust(3)} | #{row["created_on"]} | #{row["amount"].rjust(10)} | #{row["memo"]}"
    # end
    display_expenses(result)
  end

  # add a command, `add`, that can be used to add new expenses to the system
  def add_expense
    # Make sure that the `add` cmd is always passed any additional params needed to
    # add an expense; if it isn't, display an error message
    if (ARGV[1] =~ /^[0-9]{1,4}\.[0-9]{0,2}$/) && ARGV[2]
      # ARGV[1] is a numeric value (range 0.00 to 9999.99) and ARGV[2] exists
      # Execute an insert statement to add the new expense to the table
      # db.exec "INSERT INTO expenses (amount, memo) VALUES (1.23, 'some text');" # for testing
      # WARNING: don't use .exec with user-entered data !
      # DB.exec "INSERT INTO expenses (amount, memo) VALUES (#{ARGV[1]}, '#{ARGV[2]}');"
      if ARGV[3] # a date was supplied
        begin
          Date.parse(ARGV[3]) # raises an ArgumentError if date is invalid
        rescue ArgumentError
          puts "If supplying a date, you must provide a valid value in YYYY-MM-DD format."
        else
          sql = "INSERT INTO expenses (amount, memo, created_on) VALUES ($1, $2, $3);"
          @db.exec_params(sql, [ARGV[1], ARGV[2], ARGV[3]])
        end
      else # use the db DEFAULT value for the date
        sql = "INSERT INTO expenses (amount, memo) VALUES ($1, $2);"
        @db.exec_params(sql, [ARGV[1], ARGV[2]])
      end
    else
      puts "You must provide an amount and memo."
    end
  end

  def search_expenses
    # if (ARGV[1])
      # sql = "SELECT * FROM expenses WHERE memo = $1;"
      sql = "SELECT * FROM expenses WHERE memo ILIKE ('%'||$1||'%');"
      result = @db.exec_params(sql, [ARGV[1]])

      if result.values.empty?
        puts "There is no memo like '#{ARGV[1]}'."
      else
        display_expenses(result)
      end
    # else
    #   puts "You must provide a search string (or memo)."
    # end
  end

  def delete_expense
    result = @db.exec("SELECT id FROM expenses;")
    if result.values.flatten.include?(ARGV[1])
      sql = "SELECT * FROM expenses WHERE id = $1;"
      result = @db.exec_params(sql, [ARGV[1]])
      sql = "DELETE FROM expenses WHERE id = $1;"
      @db.exec_params(sql, [ARGV[1]])
      puts "The following expense has been deleted:"
      display_expenses(result)
    else
      puts "There is no expense with the id '#{ARGV[1]}'."
    end
  end

  def clear_expenses
    puts "This will remove all expenses. Are you sure? (y/n)"
    # if $stdin.gets.chomp.downcase == 'y'
    if $stdin.getch.downcase == 'y'
      @db.exec("DELETE FROM expenses;")
      puts "All expenses have been deleted." # assumes a successful DELETE occurs
    end
  end

  private

  # Display a tbl of results
  def display_expenses(result)
    # The list command should display a count of expenses in addition to the total of all expenses
    num = result.ntuples
    puts case num
      when 0
        "There are no expenses."
      when 1
        "There is 1 expense."
      else
        "There are #{num} expenses."
    end

    # total = 0
    # result.each do |row|
    #   total += (row["amount"].to_f * 100).round # convert to pennies
    #   puts "#{row["id"].rjust(3)} | #{row["created_on"]} | #{row["amount"].rjust(10)} | #{row["memo"]}"
    # end
    total = result.reduce(0) do |ttl, row|
      puts "#{row["id"].rjust(3)} | #{row["created_on"]} | #{row["amount"].rjust(10)} | #{row["memo"]}"
      ttl + (row["amount"].to_f * 100).round # convert to pennies
    end

    puts "-" * 50
    puts "Total #{(total.to_f / 100).round(2).to_s.rjust(23)}"
  end

  # Add a new method, setup_schema to ExpenseData. Call this method inside ExpenseData#initialize.
  def setup_schema
    # See if the expenses table already exists. If it doesn't, create it
    sql =
      "SELECT count(*) FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'expenses';"
    if @db.exec(sql).field_values("count").first == "0" # the table does not exist
      # Open the schema.sql file, read in the schema for the table, and send it to the db server
      filehandle = File.open("./schema.sql", "r")
      sql = File.read(filehandle)
      filehandle.close
      @db.exec(sql)
    end
  end
end


# Move the parameter handling into a new class, CLI
class CLI
  # Create an instance of ExpenseData in CLI#initialize
  def initialize
    @expdata = ExpenseData.new
  end

  # print a list of avail cmd-line args
  def display_help
    puts <<-HELP # create and output a heredoc w/ avail cmd-line options
      An expense recording system

      Commands:

      add AMOUNT MEMO [DATE] - record a new expense
      clear - delete all expenses
      list - list all expenses
      delete NUMBER - remove expense with id NUMBER
      search QUERY - list expenses with a matching memo field
    HELP
  end

  def run
    # Check the value of the first argument passed to the program, and call the
    # appropriate method
    if ARGV.size > 0
      case ARGV[0]
        when "list"
          @expdata.list_expenses
        when "add"
          @expdata.add_expense
        when "search"
          @expdata.search_expenses
        when "delete"
          @expdata.delete_expense
        when "clear"
          @expdata.clear_expenses
        else
          puts "Unknown command; please try again."
      end
    else
      display_help
    end
  end
end


# Create a new instance of CLI and call CLI#run on it
# Note: there is no need to pass in ARGV; it is a global var
cli = CLI.new.run
